#ifndef __SEMAPHORE_SHADER__
#define __SEMAPHORE_SHADER__

const char * const semaphore_shader =
"#define SEM_HEIGHT 0.3\n"
"#define SEM_RADIUS 40\n"
"#define SEM_RADIUS_SQUARED 1600 //40^2\n"
"struct VOut{\n"
"    float4 position : SV_POSITION;\n"
"};\n"
"cbuffer cbViewport : register(b0){\n"
"    float width;\n"
"    float height;\n"
"}\n"
"cbuffer cbLights : register(b1){\n"
"    float color;\n"
"    float count;\n"
"}\n"
"VOut VShader(float4 position : POSITION){\n"
"    VOut output;\n"
"    output.position = position;\n"
"    return output;\n"
"}\n"
"float4 PShader(float4 position : SV_POSITION) : SV_TARGET{\n"
"    if(position.y % 4 < 1.0 || position.x % 4 < 1.0){\n"
"         clip(-1);\n"
"         return float4(0.0, 0.0, 0.0, 0.0);\n"
"    }\n"
"    float sem_x[4] = {\n"
"            width*0.5-(SEM_RADIUS*3)-(SEM_RADIUS*0.1*3),\n"
"            width*0.5-(SEM_RADIUS)-(SEM_RADIUS*0.1),\n"
"            width*0.5+(SEM_RADIUS)+(SEM_RADIUS*0.1),\n"
"            width*0.5+(SEM_RADIUS*3)+(SEM_RADIUS*0.1*3)\n"
"          };\n"
"    for(int i=0; i<(int)count; i++){\n"
"         float2 sem_pos = float2(sem_x[i], height*SEM_HEIGHT);\n"
"         float2 dif = float2(sem_pos.x-position.x, sem_pos.y-position.y);\n"
"         float quadrance = dif.x*dif.x+dif.y*dif.y;\n"
"         if(quadrance < SEM_RADIUS_SQUARED){\n"
"                return float4(1.0, color, 0.0, 1.0);\n"
"         }\n"
"     }\n"
"     clip(-1);\n"
"     return float4(0.0, 0.0, 0.0, 0.0);\n"
"}";
//"    [unroll(4)]for(int i=0; i<4; i++){"
#endif //__SEMAPHORE_SHADER__
